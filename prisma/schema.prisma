
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EstadoTransaccion {
  COMPLETADA
  PENDIENTE
  CANCELADA
}

enum TipoCategoria {
  GASTO
  INGRESO
}

enum EstadoPago {
  PENDIENTE
  PAGADO
  VENCIDO
  CANCELADO
}

model UserSettings {
  userId    String   @id @default(cuid())
  currency  String   @db.VarChar(3)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  accounts       AuthAccount[]
  authenticators Authenticator[]
  settings       UserSettings?
  categories     Category[]
  transactions   Transaction[]
  savingsGoals   SavingsGoal[]
  reminders      PaymentReminder[]
  budgets         Budget[]
  monthHistories MonthHistory[]
  yearHistories  YearHistory[]
}

model AuthAccount {
  id                        String  @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.Text
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID          String  @unique
  userId                String
  providerAccountId     String
  credentialPublicKey   String
  counter               Int
  credentialDeviceType  String
  credentialBackedUp    Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id          String         @id @default(uuid())
  name        String
  userId      String
  type        TipoCategoria?
  icon        String?
  color       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  reminders    PaymentReminder[]
  budgets    Budget[]

  @@unique([name, userId, type])
  @@index([userId])
}

model Transaction {
  id          String            @id @default(uuid())
  userId      String
  categoryId  String
  amount      Float
  status      EstadoTransaccion @default(COMPLETADA)
  date        DateTime
  notes       String?
  attachments String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category          @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model SavingsGoal {
  id            String    @id @default(uuid())
  userId        String
  name          String
  targetAmount  Decimal
  currentAmount Decimal   @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model PaymentReminder {
  id         String     @id @default(uuid())
  userId     String
  categoryId String?
  title      String
  amount     Decimal
  dueDate    DateTime
  status     EstadoPago @default(PENDIENTE)

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category?  @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model Budget {
  id          String    @id @default(uuid())
  userId      String
  categoryId  String
  amount      Decimal   @db.Decimal(15,2)
  period      String    // 'monthly', 'yearly'
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@unique([userId, categoryId, period])
}

model MonthHistory {
  id      Int      @id @default(autoincrement())
  userId  String
  day     Int
  month   Int
  year    Int
  income  Decimal  @db.Decimal(15,2)
  expense Decimal  @db.Decimal(15,2)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, year, month, day])
}

model YearHistory {
  id      Int      @id @default(autoincrement())
  userId  String
  month   Int
  year    Int
  income  Decimal  @db.Decimal(15,2)
  expense Decimal  @db.Decimal(15,2)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, year, month])
}
