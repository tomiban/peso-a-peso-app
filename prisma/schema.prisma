generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum AccountType {
  CASH
  BANK_ACCOUNT
  CREDIT_CARD
  SAVINGS
  INVESTMENT
}

enum RecurrencyFrequency {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

// Modelo de Usuario
model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String?
  image          String?
  language       String           @default("es")
  notifications  Boolean          @default(true)
  currencyId     String          // Moneda base del usuario
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  categories     Category[]
  savingsGoals   SavingsGoal[]
  reminders      PaymentReminder[]
  currency       Currency         @relation(fields: [currencyId], references: [id])

  MonthHistory MonthHistory[]

  YearHistory YearHistory[]
}

// Monedas
model Currency {
  id           String    @id @default(uuid())
  code         String    @unique // USD, EUR, etc.
  name         String
  symbol       String
  users        User[]
  accounts     Account[]
}

// Cuentas/Billeteras
model Account {
  id              String        @id @default(uuid())
  userId          String
  name            String
  type            AccountType
  currencyId      String
  currentBalance  Decimal       @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency        Currency      @relation(fields: [currencyId], references: [id])
  transactions    Transaction[]
  transfersFrom   Transfer[]    @relation("FromAccount")
  transfersTo     Transfer[]    @relation("ToAccount")

  @@unique([userId, name])
}

// Categorías
model Category {
  id            String        @id @default(uuid())
  name          String
  userId        String
  isExpense     Boolean       @default(true)  // true para gastos, false para ingresos
  icon          String?
  color         String?
  monthlyBudget Decimal?      // Solo para categorías de gastos
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@unique([name, userId, isExpense])
}

// Transacciones
model Transaction {
  id              String           @id @default(uuid())
  accountId       String
  categoryId      String
  amount          Decimal
  status          TransactionStatus @default(COMPLETED)
  date            DateTime
  notes           String?
  attachments     String?          // URLs de comprobantes
  isRecurring     Boolean          @default(false)
  frequency       RecurrencyFrequency? 
  nextExecutionDate DateTime?      
  endRecurrencyDate DateTime?      
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  account         Account          @relation(fields: [accountId], references: [id])
  category        Category         @relation(fields: [categoryId], references: [id])
}

// Transferencias entre cuentas
model Transfer {
  id                String    @id @default(uuid())
  fromAccountId     String
  toAccountId       String
  amount            Decimal
  date             DateTime
  notes            String?
  createdAt        DateTime   @default(now())
  fromAccount      Account    @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount        Account    @relation("ToAccount", fields: [toAccountId], references: [id])
}

// Metas de Ahorro
model SavingsGoal {
  id            String    @id @default(uuid())
  userId        String
  name          String
  targetAmount  Decimal
  currentAmount Decimal   @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Recordatorios de Pago
model PaymentReminder {
  id            String             @id @default(uuid())
  userId        String
  title         String
  amount        Decimal
  dueDate       DateTime
  frequency     RecurrencyFrequency @default(NONE)
  status        PaymentStatus      @default(PENDING)
  categoryId    String?            // Opcional, para vincular con una categoría
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonthHistory {
  id      Int      @id @default(autoincrement())
  userId    String
  day       Int
  month     Int
  year      Int
  income    Decimal  @db.Decimal(15,2)
  expense   Decimal  @db.Decimal(15,2)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Estadísticas mensuales por usuario (como ya lo tienes)
model YearHistory {
  id      Int      @id @default(autoincrement())  
  month     Int
  year      Int
  income    Decimal  @db.Decimal(15,2)
  expense   Decimal  @db.Decimal(15,2)
  userId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


