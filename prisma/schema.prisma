generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserSettings {
  userId   String @id
  currency String @db.VarChar(3)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(cuid())
  email          String?           @unique
  name           String?
  image          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  password       String?
  emailVerified  DateTime?
  authenticators Authenticator[]
  budgets        Budget[]
  categories     Category[]

  savingsGoals   SavingsGoal[]
  transactions   Transaction[]
  settings       UserSettings?

  accounts       AuthAccount[]
}

model AuthAccount {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  createdAt   DateTime          @default(now())
  name        String
  userId      String
  icon        String?
  color       String?
  id          String            @id @default(uuid())
  updatedAt   DateTime          @updatedAt
  type        TransactionType?  @default(INCOME)
  budgets     Budget[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId, type])
  @@index([userId])
}

model Transaction {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  amount      Decimal           @db.Decimal(15, 2)
  date        DateTime
  attachments String?
  category    String?
  categoryIcon  String?
  categoryColor String? 
  type        TransactionType?  @default(INCOME)
  userId      String
  note        String?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

}

model SavingsGoal {
  id            String    @id @default(uuid())
  userId        String
  name          String
  targetAmount  Decimal
  currentAmount Decimal   @default(0.00)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Budget {
  id         String    @id @default(uuid())
  userId     String
  categoryId String
  amount     Decimal   @db.Decimal(15, 2)
  period     String
  startDate  DateTime  @default(now())
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, period])
  @@index([userId])
  @@index([categoryId])
}

model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  income  Decimal @db.Decimal(15, 2)
  expense Decimal @db.Decimal(15, 2)


  @@id([userId, year, month, day])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  income  Decimal @db.Decimal(15, 2)
  expense Decimal @db.Decimal(15, 2)

  @@id([userId, year, month])
}


enum TransactionType {
  INCOME
  EXPENSE
}

